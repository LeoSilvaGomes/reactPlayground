{"ast":null,"code":"var _jsxFileName = \"/home/leosilvagomes/Documentos/homework/reactPlayground/projectTwo/src/pages/Main/index.js\";\nimport React, { Component } from \"react\";\nimport moment from \"moment\";\nimport logo from \"../../assets/logo.png\";\nimport { Container, Form } from \"./styles\";\nimport CompareList from \"../../components/CompareList\";\nimport api from \"../../services/api\";\nexport default class Main extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: false,\n      repositoryError: false,\n      repositoryInput: \"\",\n      repositories: []\n    };\n\n    this.handleAddRepository = async e => {\n      e.preventDefault();\n      this.setState({\n        loading: true\n      });\n\n      try {\n        const {\n          data: repository\n        } = await api.get(`/repos/${this.state.repositoryInput}`);\n\n        try {\n          localStorage.setItem(repository.id, this.state.repositoryInput);\n        } catch (err) {\n          throw err;\n        }\n\n        repository.lastCommit = moment(repository.pushed_at).fromNow();\n        this.setState({\n          repositoryInput: \"\",\n          repositories: [...this.state.repositories, repository],\n          repositoryError: false\n        });\n      } catch (err) {\n        this.setState({\n          repositoryError: true\n        });\n      } finally {\n        this.setState({\n          loading: false\n        });\n      }\n    };\n  }\n\n  async componentDidMount() {\n    this.setState({\n      loading: true\n    });\n\n    for (var i = 0; i < localStorage.length; i++) {\n      if (!localStorage.getItem(localStorage.key(i)).includes(\"/\") || parseInt(localStorage.key(i)) === NaN) {\n        console.log(Number(localStorage.key(i)) == NaN);\n        continue;\n      }\n\n      try {\n        const {\n          data: repository\n        } = await api.get(`/repos/${localStorage.getItem(localStorage.key(i))}`);\n        repository.lastCommit = moment(repository.pushed_at).fromNow();\n        this.setState({\n          repositoryInput: \"\",\n          repositories: [...this.state.repositories, repository],\n          repositoryError: false\n        });\n      } catch (err) {} finally {\n        this.setState({\n          loading: false\n        });\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: logo,\n      alt: \"Github Compare\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Form, {\n      withError: this.state.repositoryError,\n      onSubmit: this.handleAddRepository,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"usu\\xE1rio/reposit\\xF3rio\",\n      value: this.state.repositoryInput,\n      onChange: e => this.setState({\n        repositoryInput: e.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, this.state.loading ? /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-spinner fa-pulse\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 15\n      }\n    }) : \"Ok\")), /*#__PURE__*/React.createElement(CompareList, {\n      repositories: this.state.repositories,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/leosilvagomes/Documentos/homework/reactPlayground/projectTwo/src/pages/Main/index.js"],"names":["React","Component","moment","logo","Container","Form","CompareList","api","Main","state","loading","repositoryError","repositoryInput","repositories","handleAddRepository","e","preventDefault","setState","data","repository","get","localStorage","setItem","id","err","lastCommit","pushed_at","fromNow","componentDidMount","i","length","getItem","key","includes","parseInt","NaN","console","log","Number","render","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport moment from \"moment\";\nimport logo from \"../../assets/logo.png\";\nimport { Container, Form } from \"./styles\";\nimport CompareList from \"../../components/CompareList\";\nimport api from \"../../services/api\";\n\nexport default class Main extends Component {\n  state = {\n    loading: false,\n    repositoryError: false,\n    repositoryInput: \"\",\n    repositories: [],\n  };\n\n  async componentDidMount() {\n    this.setState({ loading: true });\n\n    for (var i = 0; i < localStorage.length; i++) {\n      if (\n        !localStorage.getItem(localStorage.key(i)).includes(\"/\") ||\n        parseInt(localStorage.key(i)) === NaN\n      ) {\n        console.log(Number(localStorage.key(i)) == NaN);\n        continue;\n      }\n      try {\n        const { data: repository } = await api.get(\n          `/repos/${localStorage.getItem(localStorage.key(i))}`\n        );\n\n        repository.lastCommit = moment(repository.pushed_at).fromNow();\n\n        this.setState({\n          repositoryInput: \"\",\n          repositories: [...this.state.repositories, repository],\n          repositoryError: false,\n        });\n      } catch (err) {\n      } finally {\n        this.setState({ loading: false });\n      }\n    }\n  }\n\n  handleAddRepository = async (e) => {\n    e.preventDefault();\n\n    this.setState({ loading: true });\n\n    try {\n      const { data: repository } = await api.get(\n        `/repos/${this.state.repositoryInput}`\n      );\n\n      try {\n        localStorage.setItem(repository.id, this.state.repositoryInput);\n      } catch (err) {\n        throw err;\n      }\n\n      repository.lastCommit = moment(repository.pushed_at).fromNow();\n\n      this.setState({\n        repositoryInput: \"\",\n        repositories: [...this.state.repositories, repository],\n        repositoryError: false,\n      });\n    } catch (err) {\n      this.setState({ repositoryError: true });\n    } finally {\n      this.setState({ loading: false });\n    }\n  };\n\n  render() {\n    return (\n      <Container>\n        <img src={logo} alt=\"Github Compare\" />\n\n        <Form\n          withError={this.state.repositoryError}\n          onSubmit={this.handleAddRepository}\n        >\n          <input\n            type=\"text\"\n            placeholder=\"usuário/repositório\"\n            value={this.state.repositoryInput}\n            onChange={(e) => this.setState({ repositoryInput: e.target.value })}\n          />\n          <button type=\"submit\">\n            {this.state.loading ? (\n              <i className=\"fa fa-spinner fa-pulse\" />\n            ) : (\n              \"Ok\"\n            )}\n          </button>\n        </Form>\n        <CompareList repositories={this.state.repositories} />\n      </Container>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}